<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>求生之路服务器搭建</title>
      <link href="/2023/03/21/%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/21/%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="求生之路服务器搭建流程-CentOS"><a href="#求生之路服务器搭建流程-CentOS" class="headerlink" title="求生之路服务器搭建流程(CentOS)"></a>求生之路服务器搭建流程(CentOS)</h1><h2 id="插件准备"><a href="#插件准备" class="headerlink" title="插件准备"></a>插件准备</h2><p>提前下载好需要安装的插件(Linux版本)</p><ul><li><p>下载sourcemod，链接为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.sourcemod.net/downloads.php</span><br></pre></td></tr></table></figure></li><li><p>下载metamod，链接为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.sourcemm.net/</span><br></pre></td></tr></table></figure></li><li><p>下载l4dtoolz，链接为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://forums.alliedmods.net/showthread.php?t=93600</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装CentOS并更改防火墙规则"><a href="#安装CentOS并更改防火墙规则" class="headerlink" title="安装CentOS并更改防火墙规则"></a>安装CentOS并更改防火墙规则</h2><p>安装CentOS后，在防火墙添加下列规则</p><ul><li>协议UDP，端口1-60000，策略为允许</li><li>协议TCP，端口1-60000，策略为允许</li></ul><h2 id="搭建基础环境"><a href="#搭建基础环境" class="headerlink" title="搭建基础环境"></a>搭建基础环境</h2><ul><li><p>如果CentOS是64位，则需要安装32位运行环境，指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install xulrunner.i686</span><br></pre></td></tr></table></figure></li><li><p>安装托盘程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install screen</span><br></pre></td></tr></table></figure></li><li><p>创建并进入Steam文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/Steam ; cd ~/Steam</span><br></pre></td></tr></table></figure></li><li><p>下载steamCMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://media.steampowered.com/installer/steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压下载好的steamCMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行steamCMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure></li><li><p>使用匿名登录steam</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure></li><li><p>下载求生之路服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_update 222860 validate</span><br></pre></td></tr></table></figure></li><li><p>退出steam</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></li></ul><h2 id="将第一步下载的插件进行解压整合"><a href="#将第一步下载的插件进行解压整合" class="headerlink" title="将第一步下载的插件进行解压整合"></a>将第一步下载的插件进行解压整合</h2><p>可以在Windows系统中解压，整合完成后再使用Xftp上传，替换原有文件</p><h2 id="制作server-cfg文件并上传"><a href="#制作server-cfg文件并上传" class="headerlink" title="制作server.cfg文件并上传"></a>制作server.cfg文件并上传</h2><p>新建文本文档，后缀名为cfg，上传目录为left4dead2&#x2F;cfg，此文件的模板为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//管理密码</span><br><span class="line">rcon_password &quot;0&quot;</span><br><span class="line"></span><br><span class="line">//游戏模式</span><br><span class="line">sm_cvar mp_gamemode &quot;coop&quot;</span><br><span class="line"></span><br><span class="line">//服务器人数破解</span><br><span class="line">l4d_maxplayers 4</span><br><span class="line">sv_maxplayers 4</span><br><span class="line">sv_visiblemaxplayers 4</span><br><span class="line">sv_removehumanlimit 1</span><br><span class="line">sv_force_unreserved 1</span><br><span class="line"></span><br><span class="line">//服务器难度锁定</span><br><span class="line">// Difficulty Setting: easy, normal, hard, impossible</span><br><span class="line">z_difficulty &quot;impossible&quot;</span><br><span class="line"></span><br><span class="line">//限制投票</span><br><span class="line">sm_cvar sv_allow_votes &quot;1&quot;</span><br><span class="line"></span><br><span class="line">//正版服务器匹配参数限制</span><br><span class="line">sv_region 4 </span><br><span class="line">sv_steamgroup &quot;114514&quot;</span><br><span class="line">sv_steamgroup_exclusive 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//插件开关 1=ON/0=OFF</span><br><span class="line">sm_advertisements_enabled 1</span><br><span class="line"></span><br><span class="line">//广告播放延时默认30s</span><br><span class="line">sm_advertisements_interval 60</span><br><span class="line">ads_delay 45</span><br><span class="line"></span><br><span class="line">//不允许正版大厅匹配到</span><br><span class="line">sv_allow_lobby_connect_only 0</span><br><span class="line"></span><br><span class="line">//地区代码:</span><br><span class="line">sm_cvar sv_region &quot;4&quot;</span><br><span class="line"></span><br><span class="line">// 作弊开关（1\0)</span><br><span class="line">sv_cheats 0  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//关闭模型[MOD]冲突</span><br><span class="line">sm_cvar sv_consistency 0</span><br><span class="line"></span><br><span class="line">//隐藏服务器</span><br><span class="line">sv_tags hidden</span><br><span class="line">sv_tags &quot;hidden&quot;</span><br><span class="line"></span><br><span class="line">//tick</span><br><span class="line">sm_cvar fps_max 300</span><br><span class="line">sm_cvar sv_minrate 100000</span><br><span class="line">sm_cvar sv_maxrate 100000</span><br><span class="line">sm_cvar sv_minupdaterate 100</span><br><span class="line">sm_cvar sv_maxupdaterate 100</span><br><span class="line">sm_cvar sv_mincmdrate 100</span><br><span class="line">sm_cvar sv_maxcmdrate 100</span><br><span class="line">sm_cvar nb_update_frequency 0.1</span><br><span class="line">sm_cvar net_splitrate 2 </span><br><span class="line">sm_cvar net_splitpacket_maxrate 100000</span><br><span class="line">sm_cvar sv_client_min_interp_ratio 1</span><br><span class="line">sm_cvar sv_client_max_interp_ratio 1</span><br><span class="line"></span><br><span class="line">// 防止人数不足而自动关闭</span><br><span class="line">sm_cvar sb_all_bot_game 1</span><br><span class="line"></span><br><span class="line">//玩家死亡时电脑组成队伍继续游戏</span><br><span class="line">sm_cvar allow_all_bot_survivor_team 1 </span><br></pre></td></tr></table></figure><h2 id="添加管理员用户"><a href="#添加管理员用户" class="headerlink" title="添加管理员用户"></a>添加管理员用户</h2><p>在addons&#x2F;sourcemod&#x2F;configs&#x2F;admins_simple.ini文件中最下面添加管理员，格式要正确，步骤为</p><ul><li><p>查询steamID，到steam个人资料页面右键，选择复制网页URL，转到</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://steamid.io/lookup</span><br></pre></td></tr></table></figure><p>将URL粘贴到输入框内，即可查看steamid，复制此ID</p></li><li><p>在admins_simple.ini文件的最下面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;粘贴steamID&quot; &quot;99:z&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><ul><li><p>定位到求生之路服务端目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Steam/steamapps/common/Left\ 4\ Dead\ 2\ Dedicated\ Server/</span><br></pre></td></tr></table></figure></li><li><p>新建托盘程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S 起个名字</span><br></pre></td></tr></table></figure></li><li><p>开启服务器，指令可根据需要来调整</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./srcds_run -game left4dead2 -debug -insecure +port 27015 +map c2m1_highway +mp_gamemode &quot;coop&quot;  +exec server.cfg +sv_lan 0 -tickrate 100</span><br></pre></td></tr></table></figure></li></ul><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>上一步没有问题即可连接服务器游玩，下面一些指令用户维护服务器</p><ul><li><p>进入指定的托盘程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r 托盘名或托盘id号</span><br></pre></td></tr></table></figure></li><li><p>查看所有托盘程序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure></li><li><p>结束指定的托盘程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -X -S 托盘id号 quit</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/02/10/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/10/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串匹配——KMP算法"><a href="#字符串匹配——KMP算法" class="headerlink" title="字符串匹配——KMP算法"></a>字符串匹配——KMP算法</h1><h2 id="两个重要概念"><a href="#两个重要概念" class="headerlink" title="两个重要概念"></a>两个重要概念</h2><p>字符串前缀集合：除字符串尾字符外所有的前缀（方向从左到右）</p><p>字符串后缀集合：除字符串首字符外所有的后缀（方向从左到右）</p><h2 id="KMP算法的基本思想"><a href="#KMP算法的基本思想" class="headerlink" title="KMP算法的基本思想"></a>KMP算法的基本思想</h2><p>在文本字符串A中匹配模式字符串B，定义i指针指向文本串，j指向模式串，在暴力匹配算法中，i与j指向的字符不匹配，都需要回溯，但在KMP算法中只需要回溯j指针，i指针无需回溯。</p><p>重点：当且仅当文本串A的后缀与模式串B的前缀有交集时，j需要回溯，如果画图来理解，j回溯就是将模式串后移，后移几位呢？</p><p>在文本串A的后缀集合中和模式串B的前缀集合的交集中找到最长的串（next数组的本质），j就是需要回溯到最长的串的索引位置之后，回溯到此位置，则模式串j索引前的串自然会与文本串的字符匹配，所以i不必回溯</p><p>图一：</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181208926.png" alt="image-20230210181208926"> </p><p>图二：</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181344013.png" alt="image-20230210181344013"> </p><p>文本串中的一部分子串会成功与模式串一部分子串匹配（图一绿色部分），这表明它们是完全相同的序列，而要在它们中找到文本串A的后缀与模式串B的前缀的交集的最长串，所以问题可以转化为：寻找模式串B的前缀和后缀的交集的最长串，因为A与B所匹配到的子串相同，在A中寻找后缀就是在B中找后缀，所以next也就转化为了模式串B的前缀和后缀的交集的最长串的长度</p><h2 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h2><h3 id="next数组的作用"><a href="#next数组的作用" class="headerlink" title="next数组的作用"></a>next数组的作用</h3><p>next数组的作用是记录j回溯时需要跳过的距离。</p><p>示例：</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181613925.png" alt="image-20230210181613925"> </p><p>​单个字符不存在前后缀，为0</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181657293.png" alt="image-20230210181657293"> </p><p>​没有相同的前后缀，为0</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181750327.png" alt="image-20230210181750327"> </p><p>​有相同的前后缀AB，长度为2</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181836066.png" alt="image-20230210181836066"> </p><p>​没有相同的前后缀</p><p>​<img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210181908856.png" alt="image-20230210181908856"> </p><h3 id="next数组的递归求解"><a href="#next数组的递归求解" class="headerlink" title="next数组的递归求解"></a>next数组的递归求解</h3><p>假设求模式串第17个字符的next值，到这一步前面的第16个字符的next值肯定已经求出</p><p><img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210182145343.png" alt="image-20230210182145343"> </p><p>假设p16的next是5，这表明，p16的子串的前缀和后缀最长有5个字符相同， 此时如果p16与p6相同，此时p17的next直接就是5 + 1 &#x3D; 6</p><p><img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210182223334.png" alt="image-20230210182223334"> </p><p>如果p16与p6不相同，此时假设p6的next值为2，这表明p6子串的前后缀的交集有两个相同的字符</p><p><img src="/2023/02/10/KMP%E7%AE%97%E6%B3%95/image-20230210182252497.png" alt="image-20230210182252497"> </p><p>此时将p16与p3进行比较，如果p16等于p3：</p><p>因为p1<del>p5和p11</del>p15相同，且p1<del>p2与p4</del>p5相同，可得出p1<del>p2与p4</del>p5与p11<del>p12与p14</del>p15四者互相相同</p><p>所以既然是将p16与p3进行比较，目的就是为了得到p1<del>p3与p14</del>p16是否相同，可以将问题转化为求p6的next值</p><p>则p17的next为p6的next值 + 1</p><p>如果p16不等于p3重复以上所有过程</p><h2 id="KMP算法实现"><a href="#KMP算法实现" class="headerlink" title="KMP算法实现"></a>KMP算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归，匹配完成后继续往下匹配，直到结束。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(String text,String model)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> search(text, model);</span><br><span class="line">        <span class="keyword">if</span> (result == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配结束！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;一共匹配到&quot;</span> + count + <span class="string">&quot;次！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配成功！&quot;</span>);</span><br><span class="line">        index = result + index + model.length();</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + (index + <span class="number">1</span> - model.length()) + <span class="string">&quot;个开始&quot;</span> + <span class="string">&quot;到第&quot;</span> + index + <span class="string">&quot;个结束&quot;</span>);</span><br><span class="line">        start(text.substring(result + model.length()),model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KMP</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text, String model)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] next = getKMPNext(model);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i) != model.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (text.charAt(i) == model.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == model.length()) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取字符串的子串的最长公共前后缀，即next数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getKMPNext(String target) &#123;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[target.length()];</span><br><span class="line">        <span class="comment">// 当子串是一个字符时，为0</span></span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt; target.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; target.charAt(i) != target.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target.charAt(i) == target.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树</title>
      <link href="/2023/02/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2023/02/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h1><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="什么是哈夫曼树？"><a href="#什么是哈夫曼树？" class="headerlink" title="什么是哈夫曼树？"></a>什么是哈夫曼树？</h3><p>给定n个权值作为n个叶子节点，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树</p><p>哈夫曼数是带权路径长度最短的树，权值较大的节点离根较近</p><h3 id="树的几个重要概念"><a href="#树的几个重要概念" class="headerlink" title="树的几个重要概念"></a>树的几个重要概念</h3><p>①路径和路径长度：在一棵树中，从一个节点往下可以达到的孩子或孙子节点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根节点的层数为1，则从根节点到第L层节点的路径长度为L-1</p><p>②节点的权及带权路径长度：若将树中节点赋给一个有着某种含义的数值，则这个数值称为该节点的权。节点的带权路径长度为：从根节点到该节点之间的路径长度与该节点的权的乘积</p><p>③树的带权路径长度：树的带权路径长度规定为所有叶子节点的带权路径长度之和，记为WPL(weighted path length) ,权值越大的节点离根节点越近的二叉树才是最优二叉树。</p><p>④WPL最小的就是哈夫曼树 </p><h3 id="如何构建哈夫曼树？"><a href="#如何构建哈夫曼树？" class="headerlink" title="如何构建哈夫曼树？"></a>如何构建哈夫曼树？</h3><p>①从小到大进行排序，将每一个数据，每个数据都是一个节点，每个节点可以看成是一颗最简单的二叉树</p><p>②取出根节点权值最小的两颗二叉树</p><p>③组成一颗新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</p><p>④再将这颗新的二叉树，以根节点的权值大小再次排序，不断重复1-2-3-4的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p><h3 id="哈夫曼树的实现"><a href="#哈夫曼树的实现" class="headerlink" title="哈夫曼树的实现"></a>哈夫曼树的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanTree</span> &#123;</span><br><span class="line">    /用数组创建一棵哈夫曼树，并返回此哈夫曼树的根节点</span><br><span class="line">    <span class="keyword">public</span> HuffmanTreeNode <span class="title function_">create</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        List&lt;HuffmanTreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;HuffmanTreeNode&gt;();</span><br><span class="line">        <span class="comment">// 将数组每个元素转化为哈夫曼节点，并存入到集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">HuffmanTreeNode</span>(num));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//利用集合对哈夫曼节点进行排序 </span></span><br><span class="line">            Collections.sort(list);</span><br><span class="line">            <span class="comment">// 取出集合中最小和次小的节点</span></span><br><span class="line">            <span class="type">HuffmanTreeNode</span> <span class="variable">min</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">HuffmanTreeNode</span> <span class="variable">secMin</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 构建二叉树，父节点权值等于最小和次小节点的权值和</span></span><br><span class="line">            <span class="type">HuffmanTreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuffmanTreeNode</span>(min.value + secMin.value);</span><br><span class="line">            parent.left = min;</span><br><span class="line">            parent.right = secMin;</span><br><span class="line">            <span class="comment">// list集合中删除最小和次小的节点，并加入新的节点</span></span><br><span class="line">            list.remove(min);</span><br><span class="line">            list.remove(secMin);</span><br><span class="line">            list.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为哈夫曼树需要比较节点的权值，所以要实现comparable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTreeNode</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;HuffmanTreeNode&gt; &#123;</span><br><span class="line">    <span class="type">int</span> value;<span class="comment">// 数据域，表示权值</span></span><br><span class="line">    HuffmanTreeNode left;</span><br><span class="line">    HuffmanTreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuffmanTreeNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;权值是&quot;</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 比较器方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(HuffmanTreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value - node.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><h3 id="哈夫曼编码的应用"><a href="#哈夫曼编码的应用" class="headerlink" title="哈夫曼编码的应用"></a>哈夫曼编码的应用</h3><p>哈夫曼编码广泛用于数据的压缩</p><p><img src="/2023/02/10/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/image-20230210175651061.png" alt="image-20230210175651061"> </p><h3 id="哈夫曼编码算法的具体步骤"><a href="#哈夫曼编码算法的具体步骤" class="headerlink" title="哈夫曼编码算法的具体步骤"></a>哈夫曼编码算法的具体步骤</h3><p>①确定需要传输的字符串</p><p>②统计字符串中各个字符出现的次数</p><p>③构建一棵哈夫曼树，节点的权值就是各个字符出现的次数</p><p>④构建完成后规定节点向左的路径为0，向右的路径为1</p><p>⑤哈夫曼树上所有叶子节点就是全部的字符，根据从根节点到某个叶子节点的路径确定某个字符的编码</p><h3 id="哈夫曼编码的实现"><a href="#哈夫曼编码的实现" class="headerlink" title="哈夫曼编码的实现"></a>哈夫曼编码的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanCode</span> &#123;</span><br><span class="line">    <span class="comment">// 存放字符和哈夫曼编码的对应关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Byte, String&gt; huffmanCodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Byte, String&gt;();</span><br><span class="line">    <span class="comment">// 存放从根节点到叶子节点的路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">codeWay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;HuffmanCodeNode&gt; <span class="title function_">getHuffmanNodes</span><span class="params">(<span class="type">byte</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 用map统计数组中每个字符出现的次数</span></span><br><span class="line">        Map&lt;Byte, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Byte, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(arr[i]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                map.put(arr[i], <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(arr[i], map.get(arr[i]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用list集合创建哈夫曼节点</span></span><br><span class="line">        List&lt;HuffmanCodeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;HuffmanCodeNode&gt;();</span><br><span class="line">        <span class="comment">// 遍历map集合，将map集合中的数据变为哈夫曼节点并装载到list集合中</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;Byte, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">HuffmanCodeNode</span>(entry.getKey(), entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HuffmanCodeNode <span class="title function_">createHuffmanTree</span><span class="params">(List&lt;HuffmanCodeNode&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            Collections.sort(list);</span><br><span class="line">            <span class="type">HuffmanCodeNode</span> <span class="variable">min</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">HuffmanCodeNode</span> <span class="variable">secMin</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">            <span class="type">HuffmanCodeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuffmanCodeNode</span>(<span class="literal">null</span>, min.weight + secMin.weight);</span><br><span class="line">            parent.left = min;</span><br><span class="line">            parent.right = secMin;</span><br><span class="line">            list.remove(min);</span><br><span class="line">            list.remove(secMin);</span><br><span class="line">            list.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 哈夫曼树节点，初次传入根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 路径，左0右1，初始传入空字符串&quot;&quot;即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str  用于拼接路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createHuffmanCode</span><span class="params">(HuffmanCodeNode node, String singleWay, StringBuilder connectedWay)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">way</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(connectedWay);</span><br><span class="line">        way.append(singleWay);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 节点的字符为空说明是非叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.data == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 向左递归</span></span><br><span class="line">                createHuffmanCode(node.left, <span class="string">&quot;0&quot;</span>, way);</span><br><span class="line">                <span class="comment">// 向右递归</span></span><br><span class="line">                createHuffmanCode(node.right, <span class="string">&quot;1&quot;</span>, way);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则是叶子节点，将路径放入到map集合</span></span><br><span class="line">                huffmanCodes.put(node.data, way.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建数据与哈夫曼编码的映射关系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Byte, String&gt; <span class="title function_">createHuffmanCode</span><span class="params">(<span class="type">byte</span>[] arr)</span> &#123;</span><br><span class="line">        List&lt;HuffmanCodeNode&gt; list = HuffmanCode.getHuffmanNodes(arr);</span><br><span class="line">        <span class="type">HuffmanCodeNode</span> <span class="variable">root</span> <span class="operator">=</span> HuffmanCode.createHuffmanTree(list);</span><br><span class="line">        HuffmanCode.createHuffmanCode(root, <span class="string">&quot;&quot;</span>, codeWay);</span><br><span class="line">        <span class="keyword">return</span> huffmanCodes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 哈夫曼压缩，生成哈夫曼二进制码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] generateHuffmanBinaryCode(<span class="type">byte</span>[] arr, Map&lt;Byte, String&gt; huffmanCodes) &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 遍历字符数组，将每个字符转化为哈夫曼编码，再进行拼接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> i : arr) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">codes</span> <span class="operator">=</span> huffmanCodes.get(i);</span><br><span class="line">            str.append(codes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将str转换为byte数组</span></span><br><span class="line">        <span class="comment">// 如果直接返回str不但没有压缩原数据，而且还会扩大，所以必须返回byte数组</span></span><br><span class="line">        <span class="comment">// byte数组存放的每个byte数据都是一个字节，8位</span></span><br><span class="line">        <span class="comment">// 把哈夫曼编码按照8位进行截取，就是一个byte</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.length() % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            len = str.length() / <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            len = str.length() / <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建用于储存压缩后的数据</span></span><br><span class="line">        <span class="type">byte</span>[] huffmanBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">        <span class="comment">// 记录有几个byte</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 截取字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i += <span class="number">8</span>) &#123;</span><br><span class="line">            String strByte;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">8</span> &gt; str.length()) &#123;</span><br><span class="line">                strByte = str.substring(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                strByte = str.substring(i, i + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将八位哈夫曼编码字符串转化为二进制</span></span><br><span class="line">            huffmanBytes[index] = (<span class="type">byte</span>) Integer.parseInt(strByte, <span class="number">2</span>);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> huffmanBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将byte转化为二进制字符串，需要利用Integer的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToString</span><span class="params">(<span class="type">boolean</span> flag, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * str是temp的32位补码，如果是temp是负数，由于int是四个字节32位所以截取后八位即可</span></span><br><span class="line"><span class="comment">         * 如果temp是正数，就是直接显示这个正数，因为正数的补码前面都是0，所以自动省略了</span></span><br><span class="line"><span class="comment">         * 所以正数要进行补位，补满八位</span></span><br><span class="line"><span class="comment">         * 为什么一定要八位？传进来的数据b就是八位，不会越界，所以Integer解析出来的多余部分也是没用</span></span><br><span class="line"><span class="comment">         * 使用按位或运算 str | 256，256的二进制是1 00000000，后八位都是0运算时不影响运算结果</span></span><br><span class="line"><span class="comment">         * 但是注意，在生成的哈夫曼bytes数组中，数组最后一个值并不一定是正好8位的数据产生的</span></span><br><span class="line"><span class="comment">         * 此时做按位或运算是没有意义的，因为我们需要的不是八位的String二进制数据</span></span><br><span class="line"><span class="comment">         * 而是需要将所有的二进制数据放在一起，再根据哈夫曼编码规则解析出来，这样的数据才有意义</span></span><br><span class="line"><span class="comment">         * 数组最后一个值不能补位，因为它可能本来就没有八位，补位后数据可能会错误</span></span><br><span class="line"><span class="comment">         * 为什么数组前面的值可以补位？因为它们在压缩时就是按8位截取的，而正数在Integer.toBinaryString</span></span><br><span class="line"><span class="comment">         * 时因为正数的补码前面都是0，所以自动省略了，造成不够八位，在还原（解压）时数据会错误</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp = temp | <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toBinaryString(temp);</span><br><span class="line">        <span class="comment">// 这里考虑到数组最后一个值正好是负数时，补码是32位，也要进行截取</span></span><br><span class="line">        <span class="keyword">if</span> (flag || temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.substring(str.length() - <span class="number">8</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 哈夫曼压缩</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] huffmanZip(<span class="type">byte</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">return</span> generateHuffmanBinaryCode(arr, createHuffmanCode(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 哈夫曼解压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] huffmanDecompression(Map&lt;Byte, String&gt; huffmanCodes, <span class="type">byte</span>[] huffmanBytes) &#123;</span><br><span class="line">        <span class="comment">// temp用于将byte数组的哈夫曼二进制数据拼接为二进制字符串</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; huffmanBytes.length; i++) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">by</span> <span class="operator">=</span> huffmanBytes[i];</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> (i == huffmanBytes.length - <span class="number">1</span>);</span><br><span class="line">            temp.append(byteToString(!flag, by));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到反转map集合，目的是通过value找key</span></span><br><span class="line">        Map&lt;String, Byte&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Byte&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) &#123;</span><br><span class="line">            map.put(entry.getValue(), entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// list集合用于存储得到的key，也就是哈夫曼节点的data数据域</span></span><br><span class="line">        List&lt;Byte&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Byte&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length();i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">// 计数器</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">Byte</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> temp.substring(i, i + count);</span><br><span class="line">                x = map.get(key);</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;<span class="comment">// 没匹配到对应的数据,count自增继续向后面截取字符</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 匹配到了，退出while循环</span></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            data.add(x);</span><br><span class="line">            i += count - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] originData = <span class="keyword">new</span> <span class="title class_">byte</span>[data.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; originData.length; i++) &#123;</span><br><span class="line">            originData[i] = data.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> originData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanCodeNode</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;HuffmanCodeNode&gt; &#123;</span><br><span class="line">    Byte data;<span class="comment">// 数据域：数据</span></span><br><span class="line">    <span class="type">int</span> weight;<span class="comment">// 数据域：权重</span></span><br><span class="line">    HuffmanCodeNode left;<span class="comment">// 左孩子</span></span><br><span class="line">    HuffmanCodeNode right;<span class="comment">// 右孩子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuffmanCodeNode</span><span class="params">(Byte data, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;字符&quot;</span> + data + <span class="string">&quot;的权重为&quot;</span> + weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(HuffmanCodeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weight - node.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><h2 id="为什么需要平衡二叉树？"><a href="#为什么需要平衡二叉树？" class="headerlink" title="为什么需要平衡二叉树？"></a>为什么需要平衡二叉树？</h2><p><img src="/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/image-20230210151515177.png" alt="image-20230210151515177"> </p><h2 id="平衡二叉树的特点"><a href="#平衡二叉树的特点" class="headerlink" title="平衡二叉树的特点"></a>平衡二叉树的特点</h2><p>平衡二叉树也叫平衡二叉搜索树(Self-balancing binary search tree)又被称为AVL树，可以保证查询效率较高。它具有以下特点：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1,并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。</p><h2 id="平衡二叉树的旋转"><a href="#平衡二叉树的旋转" class="headerlink" title="平衡二叉树的旋转"></a>平衡二叉树的旋转</h2><p>平衡二叉树的旋转：当添加一个节点后，可能会造成树中某个节点不平衡，这个不平衡的节点一定在刚添加的节点到根节点的通路上，此时要通过旋转来继续保持平衡状态，分为以下四种不平衡情况</p><p>​①在当前节点的左孩子的左子树上添加（左-左不平衡）需要右旋转（当前节点右旋）</p><p>​②在当前节点的左孩子的右子树上添加（左-右不平衡）需要双旋转（当前节点左子树先左旋，当前节点再右旋）</p><p>​③在当前节点的右孩子的左子树上添加（右-左不平衡）需要双旋转（当前节点右子树先右旋，当前节点再左旋）</p><p>​④在当前节点的右孩子的右子树上添加（右-右不平衡）需要左旋转（当前节点左旋）</p><p>①④是关于当前节点的镜像对称，是单旋转。单旋转包括左旋转和右旋转，指的是旋转一次即实现平衡状态</p><p>②③是关于当前节点的镜像对称，是双旋转。双旋转指的是必须旋转两次才能实现平衡状态。</p><h3 id="左旋转图解"><a href="#左旋转图解" class="headerlink" title="左旋转图解"></a>左旋转图解</h3><p><img src="/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/image-20230210152057626.png" alt="image-20230210152057626"> </p><h3 id="右旋转图解"><a href="#右旋转图解" class="headerlink" title="右旋转图解"></a>右旋转图解</h3><p><img src="/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/image-20230210152150225.png" alt="image-20230210152150225"> </p><h3 id="双旋转图解"><a href="#双旋转图解" class="headerlink" title="双旋转图解"></a>双旋转图解</h3><p><img src="/2023/02/10/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/image-20230210152236536.png" alt="image-20230210152236536"> </p><h2 id="二叉平衡树实现"><a href="#二叉平衡树实现" class="headerlink" title="二叉平衡树实现"></a>二叉平衡树实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平衡二叉树是在二叉排序树的基础上增加功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    AVLTreeNode root;</span><br><span class="line">    <span class="comment">// 添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(AVLTreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> AVLTreeNode <span class="title function_">search</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.search(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinNode</span><span class="params">(AVLTreeNode node)</span> &#123;</span><br><span class="line">        <span class="type">AVLTreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="keyword">if</span> (temp.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.left;</span><br><span class="line">        &#125;</span><br><span class="line">        delNode(temp.data);</span><br><span class="line">        <span class="keyword">return</span> temp.data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到待删除节点</span></span><br><span class="line">            <span class="type">AVLTreeNode</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.search(data);</span><br><span class="line">            <span class="keyword">if</span> (targetNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">AVLTreeNode</span> <span class="variable">parentNode</span> <span class="operator">=</span> root.getParent(targetNode.data);</span><br><span class="line">            <span class="comment">// 如果是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parentNode.left != <span class="literal">null</span> &amp;&amp; parentNode.left == targetNode) &#123;</span><br><span class="line">                    parentNode.left = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parentNode.right != <span class="literal">null</span> &amp;&amp; parentNode.right == targetNode) &#123;</span><br><span class="line">                    parentNode.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是有两个孩子的节点</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">minValue</span> <span class="operator">=</span> getMinNode(targetNode.right);</span><br><span class="line">                targetNode.data = minValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是有一个孩子的节点</span></span><br><span class="line">                <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (parentNode.left == targetNode) &#123;</span><br><span class="line">                            parentNode.left = targetNode.left;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            parentNode.right = targetNode.left;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (parentNode.left == targetNode) &#123;</span><br><span class="line">                            parentNode.left = targetNode.right;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            parentNode.right = targetNode.right;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AVLTreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;<span class="comment">// 数据域</span></span><br><span class="line">    AVLTreeNode left;<span class="comment">// 左孩子</span></span><br><span class="line">    AVLTreeNode right;<span class="comment">// 右孩子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AVLTreeNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    <span class="keyword">public</span> AVLTreeNode <span class="title function_">search</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.data == data) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.data &gt; data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.search(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.search(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找某个节点的父节点</span></span><br><span class="line">    <span class="keyword">public</span> AVLTreeNode <span class="title function_">getParent</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.data == data || <span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.data == data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &lt; <span class="built_in">this</span>.data &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.getParent(data);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt;= <span class="built_in">this</span>.data &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.getParent(data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AVLTreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.data &lt; <span class="built_in">this</span>.data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="comment">//判断添加节点后是否平衡，不平衡就调整</span></span><br><span class="line">        <span class="comment">//如果当前节点右子树比左子树高1以上</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.rightHeight() - <span class="built_in">this</span>.leftHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.rightHeight() &lt; <span class="built_in">this</span>.right.leftHeight())&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.rightRotate();</span><br><span class="line">                <span class="built_in">this</span>.leftRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前节点左子树比右子树高1以上</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.leftHeight() - <span class="built_in">this</span>.rightHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//且当前节点的左子树的左子树的高度低于当前节点的左子树的右子树的高度</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.leftHeight() &lt; <span class="built_in">this</span>.left.rightHeight())&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.leftRotate();</span><br><span class="line">                <span class="built_in">this</span>.rightRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归计算节点高度：节点的高度等于左子树高度和右子树高度比较后的最大值再加上节点自身的高度1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span> : left.getHeight(), right == <span class="literal">null</span> ? <span class="number">0</span> : right.getHeight()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算节点的左孩子的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算节点的右孩子的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左旋转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AVLTreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AVLTreeNode</span>(<span class="built_in">this</span>.data);</span><br><span class="line">        temp.left = <span class="built_in">this</span>.left;</span><br><span class="line">        temp.right = <span class="built_in">this</span>.right.left;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="built_in">this</span>.right.data;</span><br><span class="line">        <span class="built_in">this</span>.right = <span class="built_in">this</span>.right.right;</span><br><span class="line">        <span class="built_in">this</span>.left = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右旋转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AVLTreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AVLTreeNode</span>(<span class="built_in">this</span>.data);</span><br><span class="line">        temp.right = <span class="built_in">this</span>.right;</span><br><span class="line">        temp.left = <span class="built_in">this</span>.left.right;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="built_in">this</span>.left.data;</span><br><span class="line">        <span class="built_in">this</span>.left = <span class="built_in">this</span>.left.left;</span><br><span class="line">        <span class="built_in">this</span>.right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;data: &quot;</span> + data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
